grammar es.unican.lavoisier.Lavoisier with org.eclipse.xtext.common.Terminals

generate lavoisier "http://www.unican.es/lavoisier/Lavoisier"

Datasets:
  "domainModelNSURI" + domainModelNSURI=STRING
  "domainModelInstance" + domainModelInstance=STRING
  (datasets+=Dataset)*;

Dataset:
  'dataset' name=ID '{'
    mainClass=MainClass
    (includedReferences+=IncludedReference)*
  '}';

MainClass:
  'mainClass' name=ID (attributeFilter=AttributeFilter)?
  (instancesFilter=InstancesFilter)?
  ('{'typeFilter=TypeFilter'}')?;

IncludedReference:
  SimpleReference | AggregatedReference;

SimpleReference:
  'include' name=ID (attributeFilter=AttributeFilter)?
  /*
   * An instance filter can only be used in unbounded references, so we can
   * limit its usage to those cases where a "by" pivot id is specified
   */
  ('by' referenceId=Path
    (instancesFilter=InstancesFilter)?)?
  ('{'
    (typeFilter=TypeFilter)?
    (includedReferences+=IncludedReference)*
   '}')?;

AggregatedReference:
  'calculate' name=ID 'as' function=AggregationFunction '('path=Path')'
  (filter=InstancesFilter)?
  ('by' referenceId=Path (instancesFilter=InstancesFilter)?)?
;

AggregationFunction:
  "count" | "sum" | "avg" | "max" | "min";

TypeFilter:
  TypeCompletion | TypeSelection;

// Allows to customize a specific type, without excluding other present types
TypeCompletion:
  ('as' typeCustomizations+=TypeCustomization)+;

// Specifies the types that will be processed (any other is discarded)
TypeSelection:
  ('only_as' typeCustomizations+=TypeCustomization)+;

TypeCustomization:
  name=ID
  (attributeFilter=AttributeFilter)?
  (instancesFilter=InstancesFilter)?
  ('{'includedReferences+=IncludedReference'}')*;

AttributeFilter:
  '['attributes+=ID (',' attributes+=ID)*']';

InstancesFilter:
  'where' path=Path '=' value=Value |
  'where' path=Path '>=' value=Value;

BooleanExpression returns BooleanExpression:
  AndConjunction;

AndConjunction returns BooleanExpression:
  OrConjunction ({AndConjunction.left=current} "and" right=OrConjunction)*;

OrConjunction returns BooleanExpression:
  Primary ({OrConjunction.left=current} "or" right=Primary)*;

Primary returns BooleanExpression:
  Comparison | '(' AndConjunction ')';

Comparison:
  {Equality}
  path=Path '=' value=STRING |
  {Inequality}
  path=Path '!=' value=STRING |
  {MoreThan}
  path=Path '>' value=STRING |
  {MoreThanOrEqual}
  path=Path '>=' value=STRING |
  {LessThan}
  path=Path '<' value=STRING |
  {LessThanOrEqual}
  path=Path '<=' value=STRING;

Path:
  jumps+=ID ('.'jumps+=ID)*;

Value:
  STRING | INT;

